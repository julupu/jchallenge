#include "stdafx.h"
#include "jchallenge.h"

#define MAX_LOADSTRING 100

static char* lsdga = "HAHAHAHA"; 
static char* funclsdga = "OphUILARX";
static char lol[] = "\x07\x2d\x24\x38\x0c\x23\x2f\x41";

unsigned char enc1[384] = {
	0x1A, 0xFB, 0x84, 0xD4, 0xA5, 0x44, 0x40, 0x52, 0x4F, 0x23, 0x3E, 0x02,
	0xC4, 0xF1, 0xB9, 0xAC, 0xB0, 0x8F, 0xD1, 0x17, 0x49, 0x4C, 0x41, 0xEA,
	0x83, 0xBC, 0xA4, 0x99, 0xBA, 0xE7, 0xC2, 0x2F, 0x43, 0x70, 0x1D, 0x52,
	0x7A, 0x8C, 0xA8, 0x1F, 0x4E, 0x70, 0x68, 0xD6, 0x34, 0x6C, 0x40, 0x27,
	0x55, 0xFB, 0x2D, 0x45, 0xC0, 0x09, 0xB9, 0xD9, 0x0A, 0x64, 0xE1, 0x10,
	0xA5, 0xC7, 0x04, 0x4A, 0xC6, 0x35, 0x88, 0xDE, 0x0C, 0x50, 0xC8, 0x17,
	0x9B, 0x9B, 0x70, 0xDE, 0x0C, 0x54, 0xC8, 0x17, 0xB7, 0xFB, 0x2D, 0x49,
	0xC0, 0x09, 0xAD, 0xD9, 0x0A, 0x60, 0xE1, 0x10, 0xA9, 0xC7, 0x04, 0x46,
	0xC6, 0x35, 0xBC, 0x92, 0x0C, 0xF0, 0x41, 0x52, 0x4F, 0x70, 0x83, 0x5C,
	0xC2, 0x09, 0xFD, 0xD1, 0x8F, 0x71, 0xE1, 0x10, 0xF5, 0xC7, 0x04, 0xEE,
	0x74, 0x35, 0x64, 0x5A, 0xCA, 0xD5, 0x41, 0x52, 0x4F, 0xFB, 0x2D, 0x5D,
	0x4A, 0x09, 0xFD, 0x5D, 0xF1, 0x78, 0xE3, 0x10, 0xF5, 0x67, 0x04, 0x72,
	0x7C, 0xA2, 0x9F, 0x20, 0xA5, 0xC7, 0x04, 0xAA, 0x40, 0xCE, 0x7C, 0x45,
	0x7A, 0x86, 0xCA, 0x17, 0xF3, 0x43, 0xBA, 0xA2, 0x3C, 0x64, 0xCA, 0x17,
	0x6B, 0xF8, 0x64, 0x45, 0xC2, 0x09, 0x49, 0x51, 0x0A, 0xCC, 0x67, 0xEB,
	0x41, 0xC7, 0x04, 0xEE, 0x4C, 0x35, 0x48, 0x66, 0x9B, 0xBB, 0x34, 0xBE,
	0xC4, 0x35, 0x90, 0x5A, 0xF7, 0x58, 0x51, 0x61, 0x85, 0xFB, 0x2D, 0x5D,
	0x4A, 0x09, 0xFD, 0xDA, 0x47, 0xFB, 0x2D, 0x5D, 0x4A, 0x09, 0xFD, 0x5D,
	0xF1, 0x78, 0xED, 0x9C, 0x3C, 0x56, 0xCA, 0x1F, 0xF3, 0x73, 0x25, 0x75,
	0xF1, 0x40, 0x41, 0x52, 0x4F, 0x43, 0xBA, 0xA2, 0xB8, 0x4F, 0x14, 0x72,
	0xC4, 0x35, 0x60, 0x56, 0x0C, 0xF0, 0xC9, 0x42, 0xC4, 0x35, 0xD4, 0x66,
	0x9B, 0xBB, 0x34, 0x7A, 0xC4, 0x35, 0x4C, 0x5A, 0xF7, 0x40, 0x51, 0xD9,
	0x1A, 0x78, 0x6B, 0x00, 0xF5, 0x43, 0xFF, 0x50, 0x6C, 0xB8, 0xE0, 0x18,
	0x82, 0xA5, 0x13, 0xAD, 0xB0, 0x8F, 0xEB, 0x28, 0x69, 0x4C, 0x35, 0x07,
	0xF7, 0x71, 0x68, 0x55, 0x49, 0x8D, 0xA1, 0x52, 0xC4, 0x3D, 0x60, 0x5A,
	0xF7, 0x58, 0x40, 0xD7, 0x9D, 0x04, 0x2A, 0xED, 0x48, 0x4C, 0x41, 0x52,
	0x24, 0xB8, 0x6B, 0xDE, 0x1C, 0x44, 0x4E, 0xEC, 0x4B, 0x7A, 0xED, 0x95,
	0x3D, 0x63, 0xF9, 0x53, 0x4F, 0x70, 0x68, 0x3E, 0x81, 0x49, 0xCA, 0x07,
	0x47, 0x7F, 0xD6, 0x51, 0x43, 0xC9, 0x81, 0x26, 0x53, 0xC8, 0x69, 0x55,
	0x49, 0x4C, 0x2A, 0x9A, 0x48, 0xFB, 0x3D, 0x5D, 0x46, 0xF2, 0x45, 0x58,
	0xCA, 0xB0, 0x1C, 0x5C, 0xF1, 0x40, 0x41, 0x52, 0x4F, 0x9B, 0x6D, 0xBE,
	0x4A, 0xC7, 0x04, 0x76, 0x10, 0x2E, 0x33, 0xDE, 0xAC, 0x11, 0x82, 0x52 
};


unsigned char enc2[385] = {
	0x1A, 0xFB, 0x84, 0xD4, 0xA5, 0x44, 0x40, 0x52, 0x4F, 0x23, 0x3E, 0x02,
	0xC4, 0xF1, 0xB9, 0xAC, 0xB0, 0x8F, 0xD1, 0x17, 0x49, 0x4C, 0x41, 0xEA,
	0x83, 0xBC, 0xA4, 0x99, 0xBA, 0xE7, 0xC2, 0x2F, 0x43, 0x70, 0x1D, 0x5D,
	0xC2, 0x09, 0x4D, 0xBB, 0x01, 0x71, 0x68, 0x55, 0xCA, 0x31, 0x61, 0x53,
	0x3A, 0x6A, 0xE3, 0x10, 0x59, 0xC5, 0x04, 0xAA, 0xC4, 0x35, 0x7C, 0xDC,
	0x0C, 0xA0, 0xCA, 0x17, 0x57, 0xF9, 0x2D, 0xB5, 0xC2, 0x09, 0x5D, 0xDB,
	0x0A, 0xA4, 0x83, 0x4D, 0xC2, 0x09, 0x59, 0xDB, 0x0A, 0x88, 0xE3, 0x10,
	0x55, 0xC5, 0x04, 0xBE, 0xC4, 0x35, 0x78, 0xDC, 0x0C, 0xAC, 0xCA, 0x17,
	0x5B, 0xF9, 0x2D, 0x81, 0x8E, 0x09, 0xFD, 0x52, 0x4F, 0x70, 0x68, 0xBE,
	0x40, 0xC7, 0x04, 0xEE, 0xCC, 0xB0, 0x69, 0xDC, 0x0C, 0xF0, 0xCA, 0x17,
	0xF3, 0x4B, 0x2D, 0x59, 0x46, 0xCF, 0xDB, 0x52, 0x4F, 0x70, 0xE3, 0x10,
	0x41, 0x4F, 0x04, 0xEE, 0x40, 0xCE, 0x60, 0xDE, 0x0C, 0xF0, 0x6A, 0x17,
	0x6F, 0x43, 0xBA, 0xA2, 0x3C, 0xA0, 0xCA, 0x17, 0xB7, 0x7F, 0xD6, 0x41,
	0x59, 0x7F, 0x8B, 0xD9, 0x0A, 0xCC, 0x5B, 0x87, 0xBE, 0x39, 0x69, 0xD9,
	0x0A, 0x54, 0xE0, 0x59, 0x59, 0xC7, 0x04, 0x5A, 0x4C, 0x35, 0xD4, 0x5A,
	0xF7, 0x44, 0xCA, 0x17, 0xF3, 0x73, 0x2D, 0x75, 0x7A, 0x9E, 0xB6, 0x27,
	0xA3, 0xFB, 0x2D, 0xAD, 0x46, 0xF2, 0x55, 0x42, 0x7C, 0xBA, 0xE3, 0x10,
	0x41, 0x4F, 0x04, 0xEE, 0xC7, 0x78, 0xE3, 0x10, 0xF5, 0x7F, 0x93, 0xA5,
	0x3A, 0x58, 0xE3, 0x10, 0x6D, 0x43, 0xFF, 0x5E, 0x5F, 0xFB, 0x3D, 0x5D,
	0x4A, 0x19, 0xFD, 0x5D, 0xF1, 0x72, 0x4B, 0x9D, 0xC1, 0x01, 0x8A, 0x5D,
	0xF9, 0x35, 0xA3, 0xD0, 0x89, 0x39, 0x54, 0xD9, 0x02, 0xCC, 0x6B, 0x18,
	0x69, 0xF4, 0x4A, 0x52, 0x4F, 0x70, 0x5B, 0x87, 0xBE, 0xBD, 0x42, 0x07,
	0x6F, 0xF8, 0x3D, 0x9E, 0xC2, 0x09, 0x49, 0x51, 0x0A, 0xCC, 0xE2, 0x18,
	0x82, 0xC4, 0x49, 0xBB, 0x1E, 0x8F, 0x97, 0xAA, 0xCA, 0x31, 0x61, 0x52,
	0x3B, 0x25, 0xD0, 0x54, 0x49, 0x4C, 0x41, 0x93, 0xAF, 0x70, 0xE3, 0x18,
	0x41, 0x43, 0xFF, 0x46, 0x4E, 0xF5, 0xBA, 0x21, 0x0B, 0xF4, 0x40, 0x52,
	0x4F, 0x70, 0x03, 0x9D, 0x4A, 0xC7, 0x14, 0x5A, 0x40, 0xCE, 0x6C, 0x5F,
	0xCC, 0x8C, 0x35, 0x7D, 0xF7, 0x71, 0x68, 0x55, 0x49, 0x27, 0x89, 0x57,
	0xC4, 0x25, 0x60, 0x5A, 0xF7, 0x48, 0x4B, 0xD7, 0x8F, 0x04, 0x74, 0xED,
	0x48, 0x4C, 0x41, 0x52, 0x24, 0xB8, 0x6F, 0xDE, 0x1C, 0x44, 0x4E, 0xEC,
	0x4B, 0x7A, 0xED, 0x95, 0x3D, 0x45, 0xF9, 0x5E, 0x4F, 0x70, 0x68, 0xBE,
	0x4C, 0xA7, 0x42, 0xD9, 0x0A, 0x54, 0x37, 0x0B, 0x12, 0xC7, 0xA4, 0x0F,
	0x8C
};


// Global Variables:
HINSTANCE hInst;								// current instance
TCHAR szTitle[MAX_LOADSTRING];					// The title bar text
TCHAR szWindowClass[MAX_LOADSTRING];			// the main window class name

// Forward declarations of functions included in this code module:
ATOM				MyRegisterClass(HINSTANCE hInstance);
BOOL				InitInstance(HINSTANCE, int);
LRESULT CALLBACK	WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK	About(HWND, UINT, WPARAM, LPARAM);
bool				check_password(char* input, int a);
void dec(unsigned char* buf, unsigned char* target, int len, int mode);
BOOL CheckForDebugger(void);
static bool displayed = false;

int APIENTRY _tWinMain(_In_ HINSTANCE hInstance,
                     _In_opt_ HINSTANCE hPrevInstance,
                     _In_ LPTSTR    lpCmdLine,
                     _In_ int       nCmdShow)
{
	UNREFERENCED_PARAMETER(hPrevInstance);
	UNREFERENCED_PARAMETER(lpCmdLine);

	MSG msg;
	HACCEL hAccelTable;

	// Initialize global strings
	LoadString(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
	LoadString(hInstance, IDC_JCHALLENGE, szWindowClass, MAX_LOADSTRING);
	MyRegisterClass(hInstance);

	// Perform application initialization:
	if (!InitInstance (hInstance, nCmdShow))
	{
		return FALSE;
	}

	hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_JCHALLENGE));

	// Main message loop:
	while (GetMessage(&msg, NULL, 0, 0))
	{
		if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
	}

	return (int) msg.wParam;
}



//
//  FUNCTION: MyRegisterClass()
//
//  PURPOSE: Registers the window class.
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
	WNDCLASSEX wcex;

	wcex.cbSize = sizeof(WNDCLASSEX);

	wcex.style			= CS_HREDRAW | CS_VREDRAW;
	wcex.lpfnWndProc	= WndProc;
	wcex.cbClsExtra		= 0;
	wcex.cbWndExtra		= 0;
	wcex.hInstance		= hInstance;
	wcex.hIcon			= LoadIcon(hInstance, MAKEINTRESOURCE(IDI_JCHALLENGE));
	wcex.hCursor		= LoadCursor(NULL, IDC_ARROW);
	wcex.hbrBackground	= (HBRUSH)(COLOR_WINDOW+1);
	wcex.lpszMenuName	= MAKEINTRESOURCE(IDC_JCHALLENGE);
	wcex.lpszClassName	= szWindowClass;
	wcex.hIconSm		= LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

	return RegisterClassEx(&wcex);
}

//
//   FUNCTION: InitInstance(HINSTANCE, int)
//
//   PURPOSE: Saves instance handle and creates main window
//
//   COMMENTS:
//
//        In this function, we save the instance handle in a global variable and
//        create and display the main program window.
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
   HWND hWnd;
   RECT rc;




   hInst = hInstance; // Store instance handle in our global variable

   hWnd = CreateWindow(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
      CW_USEDEFAULT, 0, 500,300, NULL, NULL, hInstance, NULL);

   GetWindowRect(hWnd, &rc);
   int xPos = (GetSystemMetrics(SM_CXSCREEN) - rc.right) / 2;
   int yPos = (GetSystemMetrics(SM_CYSCREEN) - rc.left) / 2;

   SetWindowPos(hWnd, 0, xPos, yPos, 0, 0, SWP_NOZORDER | SWP_NOSIZE);

   HWND hwndInput = CreateWindow("EDIT", 0, WS_BORDER | WS_CHILD | WS_VISIBLE, 50, 50, 100, 25, hWnd, (HMENU) INPUTFIELD, hInst, 0);
   HWND hwndOK = CreateWindow("BUTTON", "OK", WS_TABSTOP | WS_CHILD | WS_VISIBLE | BS_DEFPUSHBUTTON, 200, 50, 80, 25, hWnd, (HMENU) BUTTON_OK, hInst, 0);
   HWND hwndExit = CreateWindow("BUTTON", "Exit", WS_TABSTOP | WS_CHILD | WS_VISIBLE | BS_DEFPUSHBUTTON, 320, 50, 80, 25, hWnd, (HMENU) BUTTON_EXIT, hInst, 0);

   if (!hWnd)
   {
      return FALSE;
   }

   ShowWindow(hWnd, nCmdShow);
   UpdateWindow(hWnd);


   return TRUE;
}

//
//  FUNCTION: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  PURPOSE:  Processes messages for the main window.
//
//  WM_COMMAND	- process the application menu
//  WM_PAINT	- Paint the main window
//  WM_DESTROY	- post a quit message and return
//
//
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	int wmId, wmEvent;
	PAINTSTRUCT ps;
	HDC hdc;
	char buf[10];
	HWND hWndInput = GetDlgItem(hWnd, INPUTFIELD);
	displayed = false;
	HANDLE hprocess = GetCurrentProcess();


	switch (message)
	{
	case WM_COMMAND:
		wmId    = LOWORD(wParam);
		wmEvent = HIWORD(wParam);
		// Parse the menu selections:
		switch (wmId)
		{
		case IDM_ABOUT:
			DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
			break;
		case IDM_EXIT:
			DestroyWindow(hWnd);
			break;
		case BUTTON_EXIT:
			DestroyWindow(hWnd);
			break;
		case BUTTON_OK:		
			GetWindowText(hWndInput,buf, 9);
			
			if (IsDebuggerPresent() || CheckRemoteDebuggerPresent(hprocess, NULL)){
				if (displayed == false){
					MessageBox(NULL, "Yay!", "Good job!", MB_OK);
					displayed = true;
				}
				return false;
			}


				if (check_password(buf,0x004000a1) && check_password(buf,1) && !CheckForDebugger()){
					char y1[5] = { 17, 32, 49, 96, '\0' };
					dec((unsigned char*)y1,(unsigned char*) y1, 4, 1);
					char y2[13] = { 17, 46, 61, 97, 37, 32, 44, 36, 104, 40, 60, 96, '\0' };
					dec((unsigned char*)y2, (unsigned char*)y2, 12, 1);
					MessageBox(NULL, y1, y2, MB_OK);				
				}
				else{
					if(displayed == false && CheckForDebugger())
						MessageBox(NULL, "Yay!", "Nice job", MB_OK);
				}
			break;
		default:
			return DefWindowProc(hWnd, message, wParam, lParam);
		}
		break;
	case WM_PAINT:
		hdc = BeginPaint(hWnd, &ps);
		EndPaint(hWnd, &ps);
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	default:
		return DefWindowProc(hWnd, message, wParam, lParam);
	}
	return 0;
}

BOOL CheckForDebugger()
{
	__try
	{
		DebugBreak();
	}
	__except (GetExceptionCode() == EXCEPTION_BREAKPOINT ?
	EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_EXECUTION)
	{
		// No debugger is attached, so return FALSE 
		// and continue.
		return FALSE;
	}
	return TRUE;
}

void dec(unsigned char* buf, unsigned char* target, int len, int mode){
	if (mode == 2){
		if ((len*(len + 1)) % 2 == 0){
			for (int i = 0; i < len; i++){
				target[i] = buf[i] ^ funclsdga[i % 8];
			}
		}
		else{
			for (int i = 0; i < len; i++){
				target[i] = buf[i] ^ funclsdga[i % 8] ^ lsdga[i % 8];
			}
		}
	}
	else if (mode == 1){
		if ((len*(len + 1)) % 2 == 0){
			for (int i = 0; i < len; i++){
				buf[i] ^= lsdga[i % 8];
			}
		}
		else{
			for (int i = 0; i < len; i++){
				buf[i] ^= lsdga[i % 8] ^ funclsdga[i % 8];
			}
		}

	}
}

#define MAPSIZE 4096
bool check_password(char* in, int b){

	if (b > 1){
		goto affe;
	}


	char pw[9] = "y}hahptj";
	char dummy[10];

	HANDLE hMapFile1, hMapFile2;
	hMapFile1 = CreateFileMapping(INVALID_HANDLE_VALUE, NULL, PAGE_EXECUTE_READWRITE, 0, MAPSIZE, "1");
	unsigned char* buf1 = (unsigned char*)MapViewOfFile(hMapFile1, FILE_MAP_ALL_ACCESS | FILE_MAP_EXECUTE, 0, 0, MAPSIZE);

	HWND o = FindWindow(lol, NULL);
	if (o != NULL){
		if (displayed == false){
			MessageBox(NULL, "Yay!", "Great job!", MB_OK);
			displayed = true;
		}
		return false;
	}



	dec(enc1, buf1, 384, 2);
	
	char* (*f1)(char*, unsigned int, char*, int, char*, int, int, char*, int) = (char*(*)(char*, unsigned int, char*, int, char*, int, int, char*, int))buf1;
	if (f1(in, strlen(in), "abcdefg", 7, "fgh", 3, 1, dummy, 8) &&
		f1(in, strlen(in), "hijklmn", 7, "ijk", 3, 2, dummy, 8) ){

		hMapFile2 = CreateFileMapping(INVALID_HANDLE_VALUE, NULL, PAGE_EXECUTE_READWRITE, 0, MAPSIZE, "2");
		unsigned char* buf2 = (unsigned char*)MapViewOfFile(hMapFile2, FILE_MAP_ALL_ACCESS | FILE_MAP_EXECUTE, 0, 0, MAPSIZE);
		// Wipe some memory before decrypting next part
		for (int i = 0; i < 384; i++){
			buf1[i] = enc2[i];
		}

		dec((unsigned char*)lol, (unsigned char*)lol, 8, 1);

		dec(enc2, buf2, 386,2 );
		char* (*f2)(char*, unsigned int, char*, int, char*, int, int, char*, int) = (char*(*)(char*, unsigned int, char*, int, char*, int, int, char*, int))buf2;
		f2(in, strlen(in), "ollah", 5, "xzy", 3, 1, dummy, 8);
		f2(in, strlen(in), "hallo", 5, "yzx", 3, 2, dummy, 8);
		for (int i = 0; i < 9; i++){
			if (in[i] == pw[i]){
				continue;
			}
			else{
				return false;
			}
		}
		affe:
		return true;
	}
return false;
}

// Message handler for about box.
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
	UNREFERENCED_PARAMETER(lParam);
	switch (message)
	{
	case WM_INITDIALOG:
		return (INT_PTR)TRUE;

	case WM_COMMAND:
		if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
		{
			EndDialog(hDlg, LOWORD(wParam));
			return (INT_PTR)TRUE;
		}
		break;
	}
	return (INT_PTR)FALSE;
}
